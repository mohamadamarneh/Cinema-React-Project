{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetThemeVar from './createGetThemeVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = {},\n      prefix = designSystemPrefix,\n      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n      attribute = DEFAULT_ATTRIBUTE,\n      defaultMode = desisgnSystemMode,\n      defaultColorScheme = designSystemColorScheme\n    } = _ref;\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = clonedBaseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getThemeVar: createGetThemeVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","createSpacing","createBreakpoints","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","createGetThemeVar","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_baseTheme$breakpoint","theme","baseTheme","defaultMode","desisgnSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","enableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","systemSpacing","spacing","systemBreakpoints","breakpoints","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","clonedBaseTheme","useMemo","JSON","parse","stringify","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","resolvedColorScheme","css","rootCss","vars","rootVars","basePrefix","getThemeVar","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","documentElement","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object"],"sources":["C:/Users/dell/Cinema-React-Project/template/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetThemeVar from './createGetThemeVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme\n  }) {\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = clonedBaseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getThemeVar: createGetThemeVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}